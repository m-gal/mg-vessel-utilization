""" Contains the functions for plotting some results used across the project.

    @author: mikhail.galkin
"""
#%% Import needed python libraryies and project config info
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
from yellowbrick import regressor

# ------------------------------------------------------------------------------
# ----------------------------- P L O T S --------------------------------------
# ------------------------------------------------------------------------------
def plot_residuals_errors(model, X_train, y_train, X_val, y_val):
    """Plots two graphs"""

    # Create grid for subplots (matplotlib API)
    fig = plt.figure(constrained_layout=True, figsize=(10, 10))
    gs = gridspec.GridSpec(ncols=2, nrows=2, figure=fig)
    # Define pleces of subplots
    ax1 = fig.add_subplot(gs[0, :])
    ax2 = fig.add_subplot(gs[1, 0])
    ax3 = fig.add_subplot(gs[1, 1])

    """
        Residuals, in the context of regression models,
        are the difference between the observed value of the target variable (y)
        and the predicted value (Å·), i.e. the error of the prediction.
        The residuals plot shows the difference between residuals
        on the vertical axis and the dependent variable on the horizontal axis,
        allowing you to detect regions within the target that may be susceptible
        to more or less error.
        When the mean squared error gap between test and train datasets is huge,
        the model tends to overfit it.
        """
    vis = regressor.ResidualsPlot(model, ax=ax1, train_color="b", test_color="g")
    vis.fit(X_train, y_train)
    vis.score(X_val, y_val)
    vis.finalize()

    """
        A prediction error plot shows the actual targets from the dataset
        against the predicted values generated by our model.
        This allows us to see how much variance is in the model.
        You can diagnose regression models using this plot by comparing against
        the 45 degree line, where the prediction exactly matches the mode.
        """
    # # Prediction errors for Train set
    vis = regressor.PredictionError(model, ax=ax2)
    vis.fit(X_train, y_train)
    vis.score(X_train, y_train)
    vis.finalize()
    # Prediction errors for Evaluated set
    vis = regressor.PredictionError(model, ax=ax3, point_color="g")
    vis.fit(X_train, y_train)
    vis.score(X_val, y_val)
    vis.finalize()

    # Get current figure
    fig = plt.gcf()
    plt.close()
    return fig


#%%
